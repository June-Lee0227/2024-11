// 1. Use strict
// added in ES 5
// use this for Vanila Javascript
'use strict';

// 2. Variable
// let (added in ES6)  >> 현대적으로 쓰이는 let 같은 것

let name = 'june';
console.log(name);
name = 'hello';
console.log(name);

{   } 바 안에 들어가면 블럭 밖에서는 볼 수 X 
ex. 
{
let name = 'june';
console.log(name);
name = 'hello';
console.log(name);
}
console.log(name); > 밖에서 접근해도 아무 값도 나오지 X


globalName > 어느 곳에서나 접근이 가능 
let globalName = 'global name';

//// var (절대 금지)
//// var hoisting (move declaration from bottom to top) : 선언이 어디있든 상관 없이 끌어올려주는 것
//// has no block scope 
age = 4;
var age;

// 3.Constants (mutable data type) <-> let (immutable data type)
// favor immutable data type always for a few reasons: 웬만하면 값이 변하지 않는 값을 사용해라 
// - security
// - thread safety
// - reduce human mistakes
const daysInWeek = 7;
const maxNumber = 5;

// 4. Variable types  
- primitive, single item: number, string, boolean, null
- object, box container
- function, first-class function

const count = 17; // integer
const size - 17.1; // decimal number


// string 
const char = 'c';
const brendan = 'brendan'
const greeting = 'hello ' + brendan;
console.log(`vlaue: ${greeting}, type: ${typeof greeting}`;
const helloBob = `hi {brendan}!)`; // template literals (string) >> ` 얘는 백틱(Backtick)
console.log(`value: ${helloBob}, type: ${typeof helloBob}`);
console.log('vlaue: '+ helloBob + ' type: ' + + 


// boolean
// false: 0, null, undefined, NaN, ''
// ture: any other value
const canRead = true; > 바로 값을 할당해도 되며
const test = 3 < 1; // false 가 evaluation 되어 할당되게 표현 가능
console.log(`value: ${canRead}, type: ${typeof canRead}`);
console.log(`value: ${test}, type: ${typeof test}`);

// null > 빈 자리라고 선언
let nothing = null;
console.log(`value: ${nothing}, type: ${typeof nothing}`);

// undefined > 아직 정해진 바 없다고 하는 
let x;
console.log(`value: ${x}, type: ${typeof x}`);


// symbol, create unique identifiers for objects
const symbol1 = Symbol('id');
const symbol2 = Symbol('id');
console.log(symbol1 === symbol2);   
const gSymbol1 = Symbol.for('id');
const gSymbol2 = Symbol.for('id');
console.log(gSymbol1 === gSymbol2); // true
console.log(`value: ${symbol1}, type: ${typeof symbol1}`);
// >> 이대로 출력하면 에러 발생, 아래와 같이 닷 디스크립션을 이용해야 함
console.log(`value: ${symbol1.description}, type: typeof symbol1}`);


런 타임에 할당된 값에 따라 타입이 변경되는 dynamic typed laguage >> JavaScript
// 5. Dynamic typing: dynamically typed langauge
let text = 'hello'; // hello 라는 string을 할당하게 되면 text는 바로 type: string (string이라는 변수가 됨)
console.log(`value: ${text} , type: ${typeof text}');
text = 1;
console.log(`value: ${text}, type: ${typeof text}`); // 숫자 1을 할당함으로서 type: number (number라는 변수로 변경)
text = '7' + 5; // string에 number 더하면 문자열에 '+' -> 5를 문자 취급 (type:string) value:75가 됨
console.log(`value: ${text}, type:${typeof text}`);
text = '8' / '2'; // 숫자열에만 나올 수 있는 연산자 나누기 '/' -> string을 number로 변환 (value: 4) 
console.log(`value: ${text}, type: ${typeof text}`);

let text = 'hello';
console.log(text.charAt(0)); // h임
// 하지만, 5.에서 설명된 과정처럼 type이 중간에 number로 바뀌면 오류 발생















